>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

# Test case: Valid integer values
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

# Test case: Invalid type (string)
>>> try:
...   bg.integer_validator("name", "John")
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test case: Value equal to zero
>>> try:
...   bg.integer_validator("age", 0)
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# Test case Negative value
>>> try:
...   bg.integer_validator("distance", -4)
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# Test case: Invalid type (float)
>>> try:
...   bg.integer_validator("distance", 4.89)
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] distance must be an integer

# Test case: Missing argument
>>> try:
...   bg.integer_validator("distance", )
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

# Test case: Invalid Type (list)
>>> try:
...   bg.integer_validator("distance", [7, 5, 8, 0])
... except Exception as e:
...   print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] distance must be an integer
